@startuml

title <size: 30> Use Case: Define Location v5.3

note "<b>Only methods related to 'define \n<b>location' use case are represented" as N1

note "<b>For the sake of readability some entities where not represented" as N2

skinparam linetype ortho

class House {
    - houseID : HouseIDVO
    - location : LocationVO
    + House(locationVO : LocationVO) : House
    + configureLocation(location : LocationVO) : boolean
}

interface AggregateRoot {
    + getId() : DomainID
}

class HouseMapper {
    + dtoToDomain(locationDTO : LocationDTO) : LocationVO
}

class LocationDTO {
    - door : String
    - street : String
    - city : String
    - country : String
    - postalCode : String
    - latitude : double
    - longitude : double
    + LocationDTO(door : String, street : String,city : String, country : String, postalCode : String, latitude : double, longitude : double)
    + getDoor() : String
    + getStreet() : String
    + getCity() : String
    + getCountry() : String
    + getPostalCode() : String
    + getLatitude() : double
    + getLongitude() : double
}

class LocationVO {
    - addressVO : AddressVO
    - gpsVO : GpsVO
    + LocationVO(addressVO : AddressVO, gpsVO : GpsVO)
}


class HouseRepositoryMem {
    - DATA : LinkedHashMap<HouseIDVO, House>
    + save(ent : House) : boolean
    + findAll() : Iterable<House>
    + findById(id : HouseIDVO) : House
    + isPresent(id : HouseIDVO) : boolean
}

class HouseRepositoryJPA {
    - houseFactory : HouseFactory
    - entityManagerFactory : EntityManagerFactory
    + HouseRepositoryJPA(houseFactory : HouseFactory,entityManagerFactory : EntityManagerFactory)
    + save(ent : House) : boolean
    + findAll() : Iterable<House>
    + findById(id : HouseIDVO) : House
    + isPresent(id : HouseIDVO) : boolean

}

interface IHouseRepositorySpringData {

}

class HouseRepositorySpringData {
    - houseFactory : HouseFactory
    - houseRepository : IHouseRepositorySpringData
    + HouseRepositorySpringData(houseFactory : HouseFactory,houseRepository : IHouseRepositorySpringData)
    + save(ent : House) : boolean
    + findAll() : Iterable<House>
    + findById(id : HouseIDVO) : House
    + isPresent(id : HouseIDVO) : boolean

}

interface HouseRepository {
    + getFirstHouse() : House
    + getFirstHouseID() : HouseIDVO
    + update(house : House) : boolean
}

class HouseServiceImpl {
    - houseRepository : HouseRepository
    - houseFactory : HouseFactory
    + HouseServiceImpl(houseRepository : HouseRepository, houseFactory : HouseFactoryImpl)

}

interface HouseService {
    + updateLocation(locationVO : LocationVO) : boolean
}

class HouseFactoryImpl {

}

interface HouseFactory {
    + createHouse(locationVO : LocationVO) : House
    + createHouse(houseID : HouseIDVO,locationVO : LocationVO) : House
}

class ConfigureLocationCTRL {
    - houseService : HouseService
    + ConfigureLocationCTRL(houseService : HouseService)
    + updateLocation(locationDTO : LocationDTO) : boolean
}

interface Repository <ID extends DomainID, T extends DomainEntity> {
    + save(ent : T) : boolean
    + findAll() : Iterable<T>
    + findById(id : ID) : T
    + isPresent(id : ID) : boolean
}

class HouseAssembler {
    + toDomain(houseFactory : HouseFactory, houseDataModel : HouseDataModel) : House
    + toDomain(houseFactory : HouseFactory, houseDataModelList : Iterable<HouseDataModel>) : Iterable<House>
}

class HouseDataModel {
    - door : String
    - street : String
    - city : String
    - country : String
    - postalCode : String
    - latitude : double
    - longitude : double
    + HouseDataModel(house : House) : HouseDataModel
    + updateFromDomain(house : House) : boolean
    + getDoor() : String
    + getStreet() : String
    + getCity() : String
    + getCountry() : String
    + getPostalCode() : String
    + getLatitude() : double
    + getLongitude() : double
}


ConfigureLocationCTRL .> HouseService
ConfigureLocationCTRL .up> HouseMapper
HouseMapper ..left> LocationDTO
HouseService ..up> HouseFactory
HouseFactoryImpl -.left|> HouseFactory
HouseService .down> HouseRepository
HouseService <|.down- HouseServiceImpl

HouseService -down.> HouseRepositoryMem
HouseService -down.> HouseRepositoryJPA

HouseRepositoryMem --right.|> HouseRepository
HouseRepositoryJPA --left.|> HouseRepository
HouseRepositorySpringData --up.|> HouseRepository

HouseRepositorySpringData ..> IHouseRepositorySpringData

HouseRepository -down.|> Repository
House -up.|> AggregateRoot

House --up-o HouseRepository

House *-- LocationVO

HouseRepositoryJPA ..> HouseDataModel
HouseRepositoryJPA ..> HouseAssembler

@enduml