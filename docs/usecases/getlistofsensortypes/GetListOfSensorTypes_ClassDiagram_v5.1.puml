@startuml
title <size: 30> Use Case: Get List of Sensor Types v5.0
note "<b>Only methods related to 'get list of sensor types'\n<b> use case are represented" as N1
skinparam linetype ortho

GetListOfSensorTypesCTRL ..> SensorTypeService


SensorTypeServiceImpl ..down> SensorTypeRepository
SensorTypeServiceImpl ..up|> SensorTypeService
SensorTypeServiceImpl ..up> SensorTypeMapper
SensorTypeRepositoryMem ..right|> SensorTypeRepository
SensorTypeRepositoryJPA ..left|> SensorTypeRepository
SensorTypeRepository --|> Repository
SensorTypeMapper ..> SensorTypeDTO
SensorTypeRepositoryJPA ..right> SensorTypeFactory
SensorTypeFactoryImpl ..up|> SensorTypeFactory
SensorTypeRepositoryJPA ..down> SensorTypeAssembler
SensorTypeAssembler ..> SensorTypeFactory
SensorTypeAssembler ..> SensorTypeDataModel

class SensorTypeDataModel{
    - sensortTypeIDVO : String;
    - unitVO : String;
}


class SensorTypeAssembler{
    toDomain(factory : SensorTypeFactory,\n listDataModel : Iterable<SensorTypeDataModel> ) : Iterable<SensorType>;
    toDomain(factory : SensorTypeFactory,\n sensorTypeDataModel : SensorTypeDataModel ) : SensorType;
}


class SensorTypeFactoryImpl{
    createSensorType(SensorTypeIDVO sensorTypeIDVO,\n UnitVO unitVO) : SensorType;
}

interface SensorTypeFactory{
    createSensorType(SensorTypeIDVO sensorTypeIDVO,\n UnitVO unitVO) : SensorType;
}

class SensorTypeRepositoryJPA{
    sensorTypeFactory : SensorTypeFactory;
    entityManagerFactory : EntityManagerFactory;
    + findAll() : Iterable<SensorType>
}

class GetListOfSensorTypesCTRL {
    - sensorTypeService: SensorTypeService
    +GetListOfSensorTypesCTRL(sensorTypeService: SensorTypeService)
    +getListOfSensorTypes(): List<SensorTypeDTO>
}

class SensorTypeServiceImpl {
    - sensorTypeRepository: SensorTypeRepository
    - sensorTypeFactory: SensorTypeFactory
    +SensorTypeService(sensorTypeRepository: SensorTypeRepository, sensorTypeFactory: SensorTypeFactory, path: String)
    +getListOfSensorTypes(): List<SensorType>
}

class SensorTypeRepositoryMem{
    - DATA: Map<SensorTypeIDVO, SensorType>
    + findAll(): Iterable<SensorType>
}

class SensorTypeMapper {
    +domainToDTO(sensorTypeList: List<SensorType>): List<SensorTypeDTO>
}

interface SensorTypeService {
    + getListOfSensorTypes(): List<SensorType>
}

interface SensorTypeRepository {}

interface Repository {
    + findAll() : Iterable<T>
    + findByID(id : ID) : T
    + isPresent(id : ID) : boolean
    + save(ent : T) : boolean
}

class SensorTypeDTO {
    - sensorTypeID: String
    - unit: String
    +SensorTypeDTO(sensorTypeID: String, unit: String)
}

@enduml