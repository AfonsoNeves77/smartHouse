@startuml

title <size: 30> Add Actuator to Device Class Diagram
note "<b>Only methods related to\n<b>Add Actuator to Device are represented" as N1
skinparam linetype ortho

       AddActuatorToDeviceCTRL ..> ActuatorMapper
       AddActuatorToDeviceCTRL ..> ActuatorTypeMapper
       AddActuatorToDeviceCTRL ..> DeviceMapper
       AddActuatorToDeviceCTRL ..> ActuatorServiceImpl
       ActuatorServiceImpl ..> ActuatorFactoryImpl
       ActuatorServiceImpl ..> ActuatorTypeRepositoryMem
       ActuatorServiceImpl ..> ActuatorRepositoryMem
       ActuatorServiceImpl ..> DeviceRepositoryMem
       ActuatorServiceImpl ..> Device
       ActuatorFactoryImpl -- Actuator : creates >
       DeviceMapper ..> DeviceDTO
       DeviceMapper -- DeviceIDVO : creates >
       ActuatorMapper ..> ActuatorDTO
       ActuatorMapper -- ActuatorNameVO : creates >
       ActuatorTypeMapper ..> ActuatorTypeDTO
       ActuatorTypeMapper -- ActuatorTypeIDVO : creates >
       DeviceRepository ..|> Repository
       ActuatorRepository ..|> Repository
       ActuatorTypeRepository ..|> Repository
       ActuatorMapper -- IntegerSettingsVO : creates >
       ActuatorMapper -- DecimalSettingsVO : creates >
       IntegerSettingsVO ..|> Settings
       DecimalSettingsVO ..|> Settings
       ActuatorNameVO ..|> ValueObject
       ActuatorTypeIDVO ..|> ValueObject
       DeviceIDVO ..|> ValueObject
       ActuatorTypeRepositoryMem ..|> ActuatorTypeRepository
       ActuatorServiceImpl ..|> ActuatorService
       ActuatorRepositoryMem ..|> ActuatorRepository
       DeviceRepositoryMem ..|> DeviceRepository
       ActuatorFactoryImpl ..|> ActuatorFactory




    class AddActuatorToDeviceCTRL{
        -actuatorService: ActuatorService
        +AddActuatorToDeviceCTRL(actuatorService)
        +addActuatorToDevice(sensorDTO, sensorTypeDTO, deviceDTO): boolean
    }



    class ActuatorTypeRepositoryMem{
        -actuatorTypes: Map<ActuatorTypeIDVO, ActuatorType>
        +findAll(): Iterable<ActuatorType>
    }

    class ActuatorServiceImpl{
        -actuatorRepository: ActuatorRepository
        -actuatorFactory: ActuatorFactory
        -actuatorTypeRepository: ActuatorTypeRepository
        -deviceRepository: DeviceRepository
        +ActuatorService(actuatorFactory, actuatorRepository, actuatorTypeRepository, deviceRepository)
        +addActuator(actuatorNameVO, deviceIDVO, actuatorTypeIDVO): boolean
    }

    class ActuatorRepositoryMem{
        -actuatorMap : Map<ActuatorIDVO, Actuator>
        +save(actuator : Actuator): boolean
    }

    class ActuatorFactoryImpl{
        -filePath: String
        -configuration: Configuration
        +createActuator(actuatorNameVO, actuatorTypeIDVO, deviceIDVO): Sensor
    }

    class ActuatorMapper{
        +ActuatorMapper()
        +createActuatorNameVO(sensorDTO): ActuatorNameVO
    }

    class ActuatorTypeMapper{
        +ActuatorTypeMapper()
        +domainToDTO(actuatorTypeList): List<ActuatorTypeDTO>
        +createActuatorTypeIDVO(actuatorTypeDTO): ActuatorTypeIDVO
    }

    class DeviceMapper{
        +DeviceMapper()
        +createDeviceIDVO(deviceDTO): DeviceIDVO
    }

    class Device {
        -deviceName: DeviceNameVO
        -deviceModel: DeviceModelVO
        -roomID: RoomIDVO
        -deviceStatus: DeviceStatusVO
        -deviceID: DeviceIDVO
        +Device(deviceID, deviceName, deviceModel, roomID, deviceStatus)
        +isActive(device): boolean
    }

    class DeviceRepositoryMem{
        -DATA: Map<DeviceIDVO, Device>
        +findById(deviceIDVO): Device
    }

    class ActuatorDTO{
        -actuatorName: String
        -actuatorID: String
        -deviceID: String
        -actuatorType: String
        +getActuatorName(): String
    }

    class ActuatorTypeDTO{
        -actuatorTypeID: String
        +getActuatorTypeID(): String
    }

    class DeviceDTO{
        -deviceID: String
        -deviceName: String
        -deviceModel: String
        -roomID: String
        -deviceStatus: boolean
        +getDeviceID(): String
    }

    interface Repository{
        + findAll() : List<T>
        + findByID(id : ID) : T
        + isPresent(id : ID) : boolean
        + save(ent : T) : boolean
    }

    class ActuatorNameVO{
            -actuatorrName: String
            +ActuatorNameVO(actuatorName)
        }

        class ActuatorTypeIDVO{
            -actuatorTypeID: String
            +ActuatorTypeIDVO(actuatorTypeID)
        }

        class DeviceIDVO{
            -deviceID: UUID
            +DeviceIDVO(deviceID)
        }

        class IntegerSettingsVO{
        -lowerLimit: int
        -upperLimit : int
        -validLimits(lowerLimit, upperLimit): boolean
        +getValue(): int[]
        }

        class DecimalSettingsVO{
        -lowerLimit: double
        -upperLimit : double
        -precision : double
        -validSettings(lowerLimit, upperLimit, precision): boolean
        -countDecimalPlaces(value : double): int
        +getValue(): double[]
        }


    interface Actuator{

    }

    interface Settings{

    }

    interface ValueObject{
    getValue(): T
    }
    interface ActuatorTypeRepository{

                }

interface ActuatorService{
    +addActuator(actuatorNameVO, deviceIDVO, actuatorTypeIDVO): boolean
}

  interface ActuatorRepository{

                }

                  interface DeviceRepository{

                                }

   interface ActuatorFactory {
    +createActuator(actuatorNameVO, actuatorTypeIDVO, deviceIDVO): Actuator
    }

@enduml