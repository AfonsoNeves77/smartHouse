@startuml

title <size: 30> Use Case: Add Sensor to Device v5.0
note "<b>Only methods related to\n<b>'add sensor to device' use case are represented" as N1
skinparam linetype ortho


       AddSensorToDeviceCTRL ..> SensorMapper
       AddSensorToDeviceCTRL ..> SensorTypeMapper
       AddSensorToDeviceCTRL ..> DeviceMapper
       AddSensorToDeviceCTRL ..> SensorServiceImpl
       SensorServiceImpl ..up|> SensorService
       SensorServiceImpl ..> SensorRepositoryMem
       SensorServiceImpl ..left> SensorFactoryImpl
       SensorServiceImpl ..> DeviceRepositoryMem
       SensorServiceImpl ..> SensorTypeRepositoryMem
       SensorServiceImpl ..right> Device
       SensorFactoryImpl ..up|> SensorFactory
       SensorFactoryImpl -- Sensor : creates >
       DeviceMapper ..> DeviceDTO
       DeviceMapper -- DeviceIDVO : creates >
       SensorMapper ..> SensorDTO
       SensorMapper -- SensorNameVO : creates >
       SensorTypeMapper ..> SensorTypeDTO
       SensorTypeMapper -- SensorTypeIDVO : creates >
       DeviceRepositoryMem ..|> DeviceRepository
       SensorRepositoryMem ..|> SensorRepository
       SensorTypeRepositoryMem ..|> SensorTypeRepository
       DeviceRepository --|> Repository
       SensorRepository --|> Repository
       SensorTypeRepository --|> Repository
       SensorNameVO ..|> ValueObject
       DeviceIDVO ..|> DomainID
       SensorTypeIDVO ..|> DomainID


    class AddSensorToDeviceCTRL{
        -sensorService: SensorService
        +AddSensorToDeviceCTRL(sensorService)
        +addSensorToDevice(deviceDTO, sensorDTO, sensorTypeDTO): boolean
    }

    class SensorTypeRepositoryMem{
        -DATA: Map<SensorTypeIDVO, SensorType>
        +isPresent(sensorTypeIDVO): boolean
    }

    class SensorServiceImpl{
        -sensorRepository: SensorRepository
        -sensorFactory: SensorFactory
        -deviceRepository: DeviceRepository
        -sensorTypeRepository: SensorTypeRepository
        +ImpSensorService(deviceRepository, sensorRepository, sensorFactory)
        +addSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): boolean
    }

    class SensorRepositoryMem{
        -sensorMap : Map<SensorIDVO, Sensor>
        +save(sensor): boolean
    }

    class SensorFactoryImpl{
        -configuration: Configuration
        +createSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): Sensor
    }

    class SensorMapper{
        +createSensorNameVO(sensorDTO): SensorNameVO
    }

    class SensorTypeMapper{
        +createSensorTypeIDVO(sensorTypeDTO): SensorTypeIDVO
    }

    class DeviceMapper{
        +createDeviceIDVO(deviceDTO): DeviceIDVO
    }

    class DeviceRepositoryMem{
        -DATA: Map<DeviceIDVO, Device>
        +findById(deviceIDVO): Device
    }

    class SensorDTO{
        -sensorName: String
        -sensorID: String
        -deviceID: String
        -sensorTypeID: String
        +getSensorName(): String
    }

    class SensorTypeDTO{
        -sensorTypeID: String
        -sensorUnit : String
        +getSensorTypeID(): String
    }

    class DeviceDTO{
        -deviceID: String
        -deviceName: String
        -deviceModel: String
        -roomID: String
        -deviceStatus: boolean
        +getDeviceID(): String
    }

    class SensorNameVO{
        -sensorName: String
        +SensorNameVO(sensorName)
    }

    class SensorTypeIDVO{
        -sensorTypeID: String
        +SensorTypeIDVO(sensorTypeID)
    }

    class DeviceIDVO{
        -deviceID: UUID
        +DeviceIDVO(deviceID)
    }

    class Device{
        -deviceName: DeviceNameVO
        -deviceModel: DeviceModelVO
        -roomID: RoomIDVO
        -deviceStatus: DeviceStatusVO
        -deviceID: DeviceIDVO
        +Device(deviceName, deviceModel, roomID)
        +isActive(): boolean
    }

    interface DeviceRepository{}

    interface SensorRepository{}

    interface SensorTypeRepository{}

    interface Repository{
        + findAll() : List<T>
        + findByID(id : ID) : T
        + isPresent(id : ID) : boolean
        + save(ent : T) : boolean
    }

    interface SensorService{
    +addSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): boolean
    }

    interface SensorFactory{
        +createSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): Sensor
    }


    interface Sensor{

    }

    interface ValueObject{
        +getValue(): T
    }

    interface DomainID{
        +getID(): String
    }


@enduml