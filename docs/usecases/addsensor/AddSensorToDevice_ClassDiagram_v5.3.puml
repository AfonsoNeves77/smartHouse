@startuml

title <size: 30> Use Case: Add Sensor to Device v5.3
note "<b>Only methods related to\n<b>'add sensor to device' use case are represented" as N1
skinparam linetype ortho


       AddSensorToDeviceCTRL ..> SensorMapper
       AddSensorToDeviceCTRL ..> SensorTypeMapper
       AddSensorToDeviceCTRL ..> DeviceMapper
       AddSensorToDeviceCTRL ..> SensorServiceImpl
       SensorServiceImpl ..> SensorFactoryImpl
       SensorServiceImpl .up.> SensorTypeRepository
       SensorServiceImpl .up.> SensorRepository
       SensorServiceImpl .up.> DeviceRepository
       SensorServiceImpl ..> Device
       SensorFactoryImpl -down- Sensor : creates >
       DeviceMapper ..> DeviceDTO
       DeviceMapper -- DeviceIDVO : creates >
       Device ..|> AggregateRoot
       SensorMapper .right.> SensorDTO
       SensorMapper -- SensorNameVO : creates >
       SensorTypeMapper ..> SensorTypeDTO
       SensorTypeMapper -- SensorTypeIDVO : creates >
       DeviceRepository -up-|> Repository
       SensorRepository -up-|> Repository
       SensorTypeRepository -up-|> Repository
       DeviceRepositoryMem ..|> DeviceRepository
       SensorTypeRepositoryMem ..|> SensorTypeRepository
       SensorNameVO ..|> ValueObject
       DeviceIDVO ..|> DomainID
       SensorTypeIDVO ..|> DomainID
       SensorServiceImpl ..|> SensorService
       SensorRepositoryMem ..|> SensorRepository
       SensorRepositoryJPA ..|> SensorRepository
       SensorRepositorySpringData ..|> SensorRepository
       SensorFactoryImpl .up.|> SensorFactory
       SensorRepositoryJPA -up- SensorDataModel : creates >
       SensorRepositoryJPA .up.> SensorAssembler
       SensorRepositorySpringData -up- SensorDataModel : creates >
       SensorRepositorySpringData .up.> ISensorRepositorySpringData
       Sensor -right-|> AggregateRoot


    class AddSensorToDeviceCTRL{
        -sensorService: SensorService
        +AddSensorToDeviceCTRL(sensorService)
        +addSensorToDevice(deviceDTO, sensorDTO, sensorTypeDTO): boolean
    }

    class SensorServiceImpl{
            -sensorRepository: SensorRepository
            -sensorFactory: SensorFactory
            -deviceRepository: DeviceRepository
            -sensorTypeRepository: SensorTypeRepository
            +ImpSensorService(deviceRepository, sensorRepository, sensorFactory)
            +addSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): boolean
    }

    class SensorRepositoryMem{
            -sensorMap : Map<SensorIDVO, Sensor>
            +save(sensor : Sensor): boolean
    }

    class SensorRepositoryJPA{
        -sensorFactory: SensorFactory
        -entityManagerFactory: EntityManagerFactory
        +SensorRepositoryJPA(sensorFactory, entityManagerFactory)
        +save(sensor : Sensor): boolean
    }



     class SensorFactoryImpl{
            -configuration: Configuration
            +createSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): Sensor
     }

     class SensorMapper{
             +createSensorNameVO(sensorDTO): SensorNameVO
     }


    class SensorTypeRepositoryMem{
        -DATA: Map<SensorTypeIDVO, SensorType>
        +isPresent(sensorTypeIDVO): boolean
    }


    class SensorTypeMapper{
        +createSensorTypeIDVO(sensorTypeDTO): SensorTypeIDVO
    }

    class DeviceMapper{
        +createDeviceIDVO(deviceDTO): DeviceIDVO
    }

    class DeviceRepositoryMem{
        -DATA: Map<DeviceIDVO, Device>
        +findById(deviceIDVO): Device
    }

    class SensorDTO{
        -sensorName: String
        -sensorID: String
        -deviceID: String
        -sensorTypeID: String
        +getSensorName(): String
    }

    class SensorTypeDTO{
        -sensorTypeID: String
        -sensorUnit : String
        +getSensorTypeID(): String
    }

    class DeviceDTO{
        -deviceID: String
        -deviceName: String
        -deviceModel: String
        -roomID: String
        -deviceStatus: boolean
        +getDeviceID(): String
    }

    class SensorNameVO{
        -sensorName: String
        +SensorNameVO(sensorName)
    }

    class SensorTypeIDVO{
        -sensorTypeID: String
        +SensorTypeIDVO(sensorTypeID)
    }

    class DeviceIDVO{
        -deviceID: UUID
        +DeviceIDVO(deviceID)
    }

    class Device{
        -deviceName: DeviceNameVO
        -deviceModel: DeviceModelVO
        -roomID: RoomIDVO
        -deviceStatus: DeviceStatusVO
        -deviceID: DeviceIDVO
        +Device(deviceName, deviceModel, roomID)
        +isActive(): boolean
    }

    class SensorRepositorySpringData{
        -iSensorRepositorySpringData : ISensorRepositorySpringData
        -sensorFactory : SensorFactory
        +SensorRepositorySpringData(sensorFactory, iSensorRepositorySpringData)
        +save(sensor : Sensor) : boolean
    }

    class SensorAssembler{
        +toDomain(sensorFactory:SensorFactory,\n sensorDataModel:SensorDataModel) : Sensor
        +toDomain(sensorFactory:SensorFactory,\n sensorDataModelList:Iterable<SensorDataModel> : Iterable<Sensor>)
    }

    class SensorDataModel{
        -id : String
        -name : String
        -sensorTypeID : String
        -deviceID : String
        +SensorDataModel(sensor : Sensor)
    }

    interface DeviceRepository{}

    interface SensorRepository{}

    interface SensorTypeRepository{}

    interface Repository{
        + findAll() : List<T>
        + findByID(id : ID) : T
        + isPresent(id : ID) : boolean
        + save(ent : T) : boolean
    }

    interface SensorService{
    +addSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): boolean
    }

    interface SensorFactory{
        +createSensor(sensorNameVO, deviceIDVO, sensorTypeIDVO): Sensor
    }


    interface Sensor{

    }

    interface ValueObject{
        +getValue(): T
    }

    interface DomainID{
        +getID(): String
    }

    interface ISensorRepositorySpringData{}

    interface AggregateRoot{
        + getID(): DomainID
    }


@enduml