@startuml
skinparam ParticipantPadding 50
    title User Story 12: Main Success Scenario
    autonumber

participant ":AddActuatorToDeviceCTRL" as C
participant ":ActuatorTypeService" as ATS
participant ":ActuatorTypeRepository" as ATR
participant ":ActuatorTypeMapper" as ATM
participant ":ActuatorMapper" as AM
participant ":DeviceMapper" as DM
participant ":DeviceService" as DS
participant ":DeviceRepository" as DR
participant ":ActuatorService" as AS
participant ":ActuatorFactory" as AF
participant "actuator : Actuator" as A
participant ":ActuatorRepository" as AR




[o-> C : actuatorTypeDTOList : getListOfActuatorTypes()
activate C
C -> ATS : listOfActuatorTypes : getListOfActuatorTypes()
activate ATS
ATS -> ATR : actuatorTypeList : findAll()
activate ATR
deactivate ATR
loop for each actuatorType in actuatorTypeList
ATS -> ATS : listOfActuatorType.add(actuatorType)
activate ATS
deactivate ATS
end
deactivate ATS

C -> ATM : actuatorTypeDTOList : domainToDTO(actuatorTypeList)
activate ATM
loop for each actuatorType in clonedListOfSensorTypes
    ATM -> ATM : ActuatorTypeDTO = domainToDTO(actuatorType)
    activate ATM
    deactivate ATM
    ATM -> ATM : actuatorTypeDTOList.add(SensorTypeDTO)
    activate ATM
    deactivate ATM
end
deactivate ATM
[o-> C : boolean : addActuatorToDevice(actuatorDTO, actuatorTypeDTO, deviceDTO)
C -> AM : actuatorNameVO : createActuatorNameVO(actuatorDTO)
activate AM
deactivate AM
C -> ATM : actuatorTypeIDVO : createActuatorTypeIDVO(actuatorTypeDTO)
activate ATM
deactivate ATM
C -> DM : deviceIDVO : createDeviceID(deviceDTO)
activate DM
deactivate DM
C -> AM : settings : createSettingsVO(actuatorDTO)
activate AM
deactivate AM
C -> ATS : boolean : actuatorTypeExists(actuatorTypeIDVO)
activate ATS
ATS -> ATR : boolean : isPresent(actuatorTypeIDVO)
activate ATR
deactivate ATS
deactivate ATR
C -> DS : boolean : isActive(deviceIDVO)
activate DS
DS -> DR : device : findByID(deviceIDVO)
activate DR
deactivate DR
deactivate DS
C -> AS : actuator : createActuator(actuatorNameVO, actuatorTypeIDVO, deviceID, settings)
activate AS
AS ->AF : create(actuatorNameVO,  actuatorTypeIDVO, deviceIDVO, settings)
deactivate AS
activate AF
AF -> A** : actuator : create(actuatorNameVO,  actuatorTypeIDVO, deviceIDVO, settings)
deactivate AF
C -> AS : boolean : saveActuator(actuator)
activate AS
AS -> AR : boolean : save(actuator)
deactivate AS
activate AR
deactivate AR
deactivate C
@enduml