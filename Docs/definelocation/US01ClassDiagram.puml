@startuml

title <size: 30> US01 Class Diagram

skinparam linetype ortho

class House <<Entity>> <<Root>>{
- houseID : HouseIDVO
- location : LocationVO
+ House(locationVO : LocationVO)
+ configureLocation(location : LocationVO) : boolean
- validateLocation(location : LocationVO) : boolean
+ getLocation() : LocationVO
+ getId() : HouseIDVO
}

interface DomainEntity {
+ getId() : DomainID
}

class HouseIDVO {
- identifier : UUID
+ HouseIDVO(identifier : UUID)
+ getID : String
}

interface DomainID {
+ getID() : String
}

class HouseMapper {
{static} + dtoToDomain(locationDTO : LocationDTO) : LocationVO
{static} - createAddressVO(locationDTO : LocationDTO) : AddressVO
{static} - createGpsLocationVO(locationDTO : LocationDTO) : GpsVO
{static} - createDoorVO(locationDTO : LocationDTO) : DoorVO
{static} - createStreetVO(locationDTO : LocationDTO) : StreetVO
{static} - createCityVO(locationDTO : LocationDTO) : CityVO
{static} - createCountryVO(locationDTO : LocationDTO) : CountryVO
{static} - createPostalCodeVO(locationDTO : LocationDTO) : PostalCodeVO
{static} - createLatitudeVO(locationDTO : LocationDTO) : LatitudeVO
{static} - createLongitudeVO(locationDTO : LocationDTO) : LongitudeVO
{static} - validateLocationDTO(locationVO : LocationVO) : boolean
}

class LocationDTO {
- door : String
- street : String
- city : String
- country : String
- postalCode : String
- latitude : double
- longitude : double
+ LocationDTO(door : String, street : String,\n city : String, country : String,\n postalCode : String, latitude : double,\n longitude : double)
+ getDoor() : String
+ getStreet() : String
+ getCity() : String
+ getCountry() : String
+ getPostalCode() : String
+ getLatitude() : double
+ getLongitude() : double
}

interface ValueObject<T> {
+ getValue() : T
}

class LocationVO {
- addressVO : AddressVO
- gpsVO : GpsVO
+ LocationVO(addressVO : AddressVO, gpsVO : GpsVO)
+ getDoor() : String
+ getStreet() : String
+ getCity() : String
+ getCountry() : String
+ getPostalCode() : String
+ getLatitude() : double
+ getLongitude() : double
+ toString() : String
}

class GpsVO {
- latitude : LatitudeVO
- longitude : LongitudeVO
+ GpsVO(latitude : LatitudeVO, longitude : LongitudeVO)
+ getLatitude() : double
+ getLongitude() : double
}

class LatitudeVO {
- latitudeValue : double
+ LatitudeVO(latitudeValue : double)
- invalidLatitudeValues(latitudeValue : double) : boolean
+ getValue() : Double
}

class LongitudeVO {
- longitudeValue : double
+ LongitudeVO(longitudeValue : double)
- invalidLongitudeValues(longitudeValue : double) : boolean
+ getValue() : Double
}

class AddressVO {
- doorVO : DoorVO
- streetVO : StreetVO
- cityVO : CityVO
- countryVO : CountryVO
- postalCodeVO : PostalCodeVO
+ AddressVO(doorVO : DoorVO, streetVO : StreetVO,\n cityVO : CityVO, countryVO : CountryVO,\n postalCodeVO : PostalCodeVO)
+ getDoor() : String
+ getStreet() : String
+ getCity() : String
+ getCountry() : String
+ getPostalCode() : String
- validCountryVOPostalCodeVOCombination(countryVO : CountryVO,\n postalCodeVO : PostalCodeVO) : boolean
- validArgs(doorVO : DoorVO, streetVO : StreetVO,\n cityVO : CityVO, countryVO : CountryVO,\n postalCodeVO : PostalCodeVO) : boolean
}

class DoorVO {
- door : String
+ DoorVO(door : String)
- isParamValid(param : String) : boolean
+ getValue() : String
}

class StreetVO {
- street : String
+ StreetVO(street : String)
+ getValue() : String
}

class CityVO {
- city : String
+ CityVO(city : String)
+ getValue() : String
}

class CountryVO {
- country : String
+ CountryVO(country : String)
- validCountry(country : String) : boolean
+ getValue() : String
}

class PostalCodeVO {
- postalCode : String
+ PostalCode(postalCode : String)
- validPostalCode(postalCode : String) : boolean
+ getValue() : String
}

class HouseRepository {
    - DATA : LinkedHashMap<HouseIDVO, House>
    + save(entity : House) : boolean
    + findAll() : Iterable<House>
    + findById(id : HouseIDVO) : House
    + isPresent(id : HouseIDVO) : boolean
    + getFirstHouse() : House
    + getFirstHouseIDVO() : HouseIDVO
}

class HouseService {
- houseRepository : HouseRepository
- houseFactory : HouseFactory
+ HouseService(houseRepository : HouseRepository, houseFactory : HouseFactory)
+ createNewHouse(locationVO : LocationVO) : House
+ updateLocation(locationVO : LocationVO) : boolean
- getFirstHouse() : House
+ getFirstHouseIDVO() : HouseIDVO
}

class HouseFactory {
+ createHouse(locationVO : LocationVO) : House
}

class ConfigureLocationCTRL {
- houseService : HouseService
+ ConfigureLocationCTRL(houseService : HouseService)
+ updateLocation(locationDTO : LocationDTO) : boolean
}

interface Repository <ID extends DomainID, T extends DomainEntity> {
+ save(entity : T) : boolean
+ findAll() : Iterable<T>
+ findById(id : ID) : T
+ isPresent(id : ID) : boolean
}

ConfigureLocationCTRL -right-> HouseService : <<uses>>
ConfigureLocationCTRL -left.> HouseMapper : <<uses>>
HouseMapper -left.> LocationDTO : <<uses>>
HouseService -right.> HouseRepository : <<uses>>
HouseRepository -right.|> Repository
HouseRepository o--down House : <<has-a>>
House *--right HouseIDVO : <<has-a>>
House -down-o LocationVO : <<has-a>>
LocationVO *--left AddressVO : <<has-a>>
LocationVO *--down GpsVO : <<has-a>>
DoorVO -right-* AddressVO : <<has-a>>
StreetVO -up-* AddressVO : <<has-a>>
CityVO -up-* AddressVO : <<has-a>>
CountryVO -up-* AddressVO : <<has-a>>
PostalCodeVO -up-* AddressVO : <<has-a>>
LatitudeVO o--right GpsVO : <<has-a>>
LongitudeVO o--up GpsVO : <<has-a>>
HouseIDVO -up.|> DomainID
House -up.|> DomainEntity
Repository -down-|> DomainEntity
Repository -down-|> DomainID
CityVO -down..|> ValueObject
CountryVO -down..|> ValueObject
PostalCodeVO -down..|> ValueObject
StreetVO -down..|> ValueObject
DoorVO -down..|> ValueObject
ValueObject <|..-right LatitudeVO
ValueObject <|..-down LongitudeVO
HouseService -down.> HouseFactory : <<uses>>

@enduml